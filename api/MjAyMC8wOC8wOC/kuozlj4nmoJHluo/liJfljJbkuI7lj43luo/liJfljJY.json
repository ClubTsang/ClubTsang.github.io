{"title":"二叉树（Binary tree）序列化与反序列化","date":"2020-08-07T16:00:00.000Z","date_formatted":{"ll":"Aug 8, 2020","L":"08/08/2020","MM-DD":"08-08"},"thumbnail":"/static/img/articles/00002.jpg","link":"2020/08/08/二叉树序列化与反序列化","tags":["二叉树,序列化,反序列化"],"categories":["二叉树","遍历"],"updated":"2021-05-06T16:20:09.315Z","content":"<h2 id=\"1、定义\">1、定义<a title=\"#1、定义\" href=\"#1、定义\"></a></h2>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c++\"><span class=\"hljs-comment\">//二叉树定义</span><br><span class=\"hljs-keyword\">typedef</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">BinaryNode</span></span><br><span class=\"hljs-class\">&#123;</span><br>    <span class=\"hljs-keyword\">int</span> val;<br>    <span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">BinaryNode</span> *<span class=\"hljs-title\">left</span>;</span><br>    <span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">BinaryNode</span> *<span class=\"hljs-title\">right</span>;</span><br>&#125; BinaryNode, *BinaryTree;<br></code></pre></td></tr></table></figure>\n<h2 id=\"2、序列化\">2、序列化<a title=\"#2、序列化\" href=\"#2、序列化\"></a></h2>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c++\"><span class=\"hljs-comment\">//通过前序遍历序列化二叉树</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">char</span> *<span class=\"hljs-title\">SerializeByPreOrder</span><span class=\"hljs-params\">(BinaryNode *root)</span></span><br><span class=\"hljs-function\"></span>&#123;<br>    <span class=\"hljs-keyword\">if</span> (root == <span class=\"hljs-literal\">NULL</span>)<br>    &#123;<br>        <span class=\"hljs-keyword\">char</span> *temp = (<span class=\"hljs-keyword\">char</span> *)<span class=\"hljs-built_in\">malloc</span>(<span class=\"hljs-number\">2</span> * <span class=\"hljs-built_in\"><span class=\"hljs-keyword\">sizeof</span></span>(<span class=\"hljs-keyword\">char</span>));<br>        <span class=\"hljs-built_in\">strcpy</span>(temp, <span class=\"hljs-string\">&quot;#,&quot;</span>);<br>        <span class=\"hljs-keyword\">return</span> temp;<br>    &#125;<br><br>    <span class=\"hljs-comment\">//int to char*</span><br>    <span class=\"hljs-keyword\">char</span> ch[<span class=\"hljs-number\">16</span>] = &#123;<span class=\"hljs-number\">0</span>&#125;;<br>    <span class=\"hljs-built_in\">sprintf</span>(ch,<span class=\"hljs-string\">&quot;%d&quot;</span>,root-&gt;val);<br>    <span class=\"hljs-built_in\">strcat</span>(ch, <span class=\"hljs-string\">&quot;,&quot;</span>);<br><br>    <span class=\"hljs-keyword\">char</span> *left = <span class=\"hljs-built_in\">SerializeByPreOrder</span>(root-&gt;left);<br>    <span class=\"hljs-keyword\">char</span> *right = <span class=\"hljs-built_in\">SerializeByPreOrder</span>(root-&gt;right);<br><br>    <span class=\"hljs-keyword\">int</span> len1 = <span class=\"hljs-built_in\">strlen</span>(ch) + <span class=\"hljs-built_in\">strlen</span>(left) + <span class=\"hljs-built_in\">strlen</span>(right) + <span class=\"hljs-number\">2</span>;<br><br>    <span class=\"hljs-keyword\">char</span> *result = (<span class=\"hljs-keyword\">char</span> *)<span class=\"hljs-built_in\">malloc</span>(len1 * <span class=\"hljs-built_in\"><span class=\"hljs-keyword\">sizeof</span></span>(<span class=\"hljs-keyword\">char</span>));<br><br>    <span class=\"hljs-built_in\">strcpy</span>(result, ch);<br>    <span class=\"hljs-built_in\">strcat</span>(result, left);<br>    <span class=\"hljs-built_in\">strcat</span>(result, right);<br><br>    <span class=\"hljs-comment\">//释放内存空间</span><br>    <span class=\"hljs-built_in\">free</span>(left);<br>    <span class=\"hljs-built_in\">free</span>(right);<br>    left = right = <span class=\"hljs-literal\">NULL</span>;<br><br>    <span class=\"hljs-keyword\">return</span> result;<br>&#125;<br><br><span class=\"hljs-comment\">//通过前序遍历序反列化二叉树</span><br><span class=\"hljs-function\">BinaryNode *<span class=\"hljs-title\">DeserializeByPreOrder</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">char</span> **str)</span></span><br><span class=\"hljs-function\"></span>&#123;<br>    <span class=\"hljs-keyword\">if</span> (*(*str) == <span class=\"hljs-string\">&#x27;#&#x27;</span>)<br>    &#123;<br>        (*str) += <span class=\"hljs-number\">2</span>;<br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">NULL</span>;<br>    &#125;<br><br>    <span class=\"hljs-keyword\">char</span> ch[<span class=\"hljs-number\">16</span>] = &#123;<span class=\"hljs-number\">0</span>&#125;;<br>    <span class=\"hljs-keyword\">int</span> i = <span class=\"hljs-number\">0</span>;<br>    <span class=\"hljs-keyword\">while</span> (*(*str) != <span class=\"hljs-string\">&#x27;,&#x27;</span>)<br>    &#123;<br>        ch[i++] = (*(*str));<br>        ++(*str);<br>    &#125;<br>    ++(*str);<br>    <br>    <span class=\"hljs-keyword\">int</span> value =<span class=\"hljs-built_in\">strtol</span>(ch,<span class=\"hljs-string\">&#x27;\\0&#x27;</span>,<span class=\"hljs-number\">10</span>);<br>    <br>    BinaryNode *root = (BinaryNode *)<span class=\"hljs-built_in\">malloc</span>(<span class=\"hljs-built_in\"><span class=\"hljs-keyword\">sizeof</span></span>(BinaryNode));<br>    root-&gt;val = value;<br>    root-&gt;left = root-&gt;right = <span class=\"hljs-literal\">NULL</span>;<br>    root-&gt;left = <span class=\"hljs-built_in\">DeserializeByPreOrder</span>(str);<br>    root-&gt;right = <span class=\"hljs-built_in\">DeserializeByPreOrder</span>(str);<br><br>    <span class=\"hljs-keyword\">return</span> root;<br>&#125;<br></code></pre></td></tr></table></figure>\n<h2 id=\"3、反序列化\">3、反序列化<a title=\"#3、反序列化\" href=\"#3、反序列化\"></a></h2>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c++\"><span class=\"hljs-comment\">//通过前序遍历反序列化二叉树</span><br><span class=\"hljs-function\">BinaryNode *<span class=\"hljs-title\">DeserializeByPreOrder</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">char</span> **str)</span></span><br><span class=\"hljs-function\"></span>&#123;<br>    <span class=\"hljs-keyword\">if</span> (*(*str) == <span class=\"hljs-string\">&#x27;#&#x27;</span>)<br>    &#123;<br>        (*str) += <span class=\"hljs-number\">2</span>;<br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">NULL</span>;<br>    &#125;<br><br>    <span class=\"hljs-keyword\">char</span> ch[<span class=\"hljs-number\">16</span>] = &#123;<span class=\"hljs-number\">0</span>&#125;;<br>    <span class=\"hljs-keyword\">int</span> i = <span class=\"hljs-number\">0</span>;<br>    <span class=\"hljs-keyword\">while</span> (*(*str) != <span class=\"hljs-string\">&#x27;,&#x27;</span>)<br>    &#123;<br>        ch[i++] = (*(*str));<br>        ++(*str);<br>    &#125;<br>    ++(*str);<br>    <br>    <span class=\"hljs-keyword\">int</span> value =<span class=\"hljs-built_in\">strtol</span>(ch,<span class=\"hljs-string\">&#x27;\\0&#x27;</span>,<span class=\"hljs-number\">10</span>);<br>    <br>    BinaryNode *root = (BinaryNode *)<span class=\"hljs-built_in\">malloc</span>(<span class=\"hljs-built_in\"><span class=\"hljs-keyword\">sizeof</span></span>(BinaryNode));<br>    root-&gt;val = value;<br>    root-&gt;left = root-&gt;right = <span class=\"hljs-literal\">NULL</span>;<br>    root-&gt;left = <span class=\"hljs-built_in\">DeserializeByPreOrder</span>(str);<br>    root-&gt;right = <span class=\"hljs-built_in\">DeserializeByPreOrder</span>(str);<br><br>    <span class=\"hljs-keyword\">return</span> root;<br>&#125;<br></code></pre></td></tr></table></figure>\n<h2 id=\"4、完整代码\">4、完整代码<a title=\"#4、完整代码\" href=\"#4、完整代码\"></a></h2>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c\"><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">include</span> <span class=\"hljs-meta-string\">&lt;stdio.h&gt;</span></span><br><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">include</span> <span class=\"hljs-meta-string\">&lt;stdlib.h&gt;</span></span><br><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">include</span> <span class=\"hljs-meta-string\">&lt;string.h&gt;</span></span><br><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">include</span> <span class=\"hljs-meta-string\">&lt;malloc.h&gt;</span></span><br><br><span class=\"hljs-comment\">//二叉树定义</span><br><span class=\"hljs-keyword\">typedef</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">BinaryNode</span></span><br><span class=\"hljs-class\">&#123;</span><br>    <span class=\"hljs-keyword\">int</span> val;<br>    <span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">BinaryNode</span> *<span class=\"hljs-title\">left</span>;</span><br>    <span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">BinaryNode</span> *<span class=\"hljs-title\">right</span>;</span><br>&#125; BinaryNode, *BinaryTree;<br><br><span class=\"hljs-comment\">//通过前序遍历序列化二叉树</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">char</span> *<span class=\"hljs-title\">SerializeByPreOrder</span><span class=\"hljs-params\">(BinaryNode *root)</span></span>;<br><span class=\"hljs-comment\">//通过前序遍历反序列化二叉树</span><br><span class=\"hljs-function\">BinaryNode *<span class=\"hljs-title\">DeserializeByPreOrder</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">char</span> **str)</span></span>;<br><span class=\"hljs-comment\">//释放二叉树内存空间</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">FreeBinaryTree</span><span class=\"hljs-params\">(BinaryNode *root)</span></span>;<br><br><span class=\"hljs-comment\">//测试函数</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">test</span><span class=\"hljs-params\">()</span></span><br><span class=\"hljs-function\"></span>&#123;<br>    <span class=\"hljs-comment\">//前序遍历序列化二叉树</span><br>    <span class=\"hljs-keyword\">char</span> ch[] = <span class=\"hljs-string\">&quot;1,2,#,-3,4,#,#,5,#,#,-8,9,#,#,21,-23,#,#,-24,#,#,&quot;</span>;<br>    <span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\">     *                                      1</span><br><span class=\"hljs-comment\">     *                                    /    \\</span><br><span class=\"hljs-comment\">     *                                   2     -8</span><br><span class=\"hljs-comment\">     *                                    \\     /  \\</span><br><span class=\"hljs-comment\">     *                                    -3   9    21</span><br><span class=\"hljs-comment\">     *                                   /   \\     /   \\</span><br><span class=\"hljs-comment\">     *                                  4     5   -23   24</span><br><span class=\"hljs-comment\">     * */</span><br>    <span class=\"hljs-keyword\">char</span> *str = (<span class=\"hljs-keyword\">char</span> *)<span class=\"hljs-built_in\">malloc</span>(<span class=\"hljs-keyword\">sizeof</span>(ch) / <span class=\"hljs-keyword\">sizeof</span>(ch[<span class=\"hljs-number\">0</span>]));<br>    <span class=\"hljs-built_in\">strcpy</span>(str, ch);<br>    <span class=\"hljs-keyword\">char</span> *strDel = str;<br><br>    <span class=\"hljs-comment\">//反序列化生成二叉树</span><br>    BinaryNode *root = DeserializeByPreOrder(&amp;str);<br><br>    <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;Binary tree generated successfully \\n&quot;</span>);<br><br>    <span class=\"hljs-comment\">//序列化二叉树</span><br>    <span class=\"hljs-keyword\">char</span> *res = SerializeByPreOrder(root);<br>    <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;Binary tree Serialize successfully \\n&quot;</span>);<br>    <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;%s \\n&quot;</span>, res);<br><br>    <span class=\"hljs-comment\">//释放空间内存</span><br>    <span class=\"hljs-built_in\">free</span>(res);<br>    <span class=\"hljs-built_in\">free</span>(strDel);<br>    FreeBinaryTree(root);<br>    res = strDel = <span class=\"hljs-literal\">NULL</span>;<br>&#125;<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span></span><br><span class=\"hljs-function\"></span>&#123;<br>    test();<br>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;<br>&#125;<br><br><span class=\"hljs-comment\">//通过前序遍历序列化二叉树</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">char</span> *<span class=\"hljs-title\">SerializeByPreOrder</span><span class=\"hljs-params\">(BinaryNode *root)</span></span><br><span class=\"hljs-function\"></span>&#123;<br>    <span class=\"hljs-keyword\">if</span> (root == <span class=\"hljs-literal\">NULL</span>)<br>    &#123;<br>        <span class=\"hljs-keyword\">char</span> *temp = (<span class=\"hljs-keyword\">char</span> *)<span class=\"hljs-built_in\">malloc</span>(<span class=\"hljs-number\">2</span> * <span class=\"hljs-keyword\">sizeof</span>(<span class=\"hljs-keyword\">char</span>));<br>        <span class=\"hljs-built_in\">strcpy</span>(temp, <span class=\"hljs-string\">&quot;#,&quot;</span>);<br>        <span class=\"hljs-keyword\">return</span> temp;<br>    &#125;<br><br>    <span class=\"hljs-comment\">//int to char*</span><br>    <span class=\"hljs-keyword\">char</span> ch[<span class=\"hljs-number\">16</span>] = &#123;<span class=\"hljs-number\">0</span>&#125;;<br>    <span class=\"hljs-built_in\">sprintf</span>(ch,<span class=\"hljs-string\">&quot;%d&quot;</span>,root-&gt;val);<br>    <span class=\"hljs-built_in\">strcat</span>(ch, <span class=\"hljs-string\">&quot;,&quot;</span>);<br><br>    <span class=\"hljs-keyword\">char</span> *left = SerializeByPreOrder(root-&gt;left);<br>    <span class=\"hljs-keyword\">char</span> *right = SerializeByPreOrder(root-&gt;right);<br><br>    <span class=\"hljs-keyword\">int</span> len1 = <span class=\"hljs-built_in\">strlen</span>(ch) + <span class=\"hljs-built_in\">strlen</span>(left) + <span class=\"hljs-built_in\">strlen</span>(right) + <span class=\"hljs-number\">2</span>;<br><br>    <span class=\"hljs-keyword\">char</span> *result = (<span class=\"hljs-keyword\">char</span> *)<span class=\"hljs-built_in\">malloc</span>(len1 * <span class=\"hljs-keyword\">sizeof</span>(<span class=\"hljs-keyword\">char</span>));<br><br>    <span class=\"hljs-built_in\">strcpy</span>(result, ch);<br>    <span class=\"hljs-built_in\">strcat</span>(result, left);<br>    <span class=\"hljs-built_in\">strcat</span>(result, right);<br><br>    <span class=\"hljs-comment\">//释放内存空间</span><br>    <span class=\"hljs-built_in\">free</span>(left);<br>    <span class=\"hljs-built_in\">free</span>(right);<br>    left = right = <span class=\"hljs-literal\">NULL</span>;<br><br>    <span class=\"hljs-keyword\">return</span> result;<br>&#125;<br><br><span class=\"hljs-comment\">//通过前序遍历反序列化二叉树</span><br><span class=\"hljs-function\">BinaryNode *<span class=\"hljs-title\">DeserializeByPreOrder</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">char</span> **str)</span></span><br><span class=\"hljs-function\"></span>&#123;<br>    <span class=\"hljs-keyword\">if</span> (*(*str) == <span class=\"hljs-string\">&#x27;#&#x27;</span>)<br>    &#123;<br>        (*str) += <span class=\"hljs-number\">2</span>;<br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">NULL</span>;<br>    &#125;<br><br>    <span class=\"hljs-keyword\">char</span> ch[<span class=\"hljs-number\">16</span>] = &#123;<span class=\"hljs-number\">0</span>&#125;;<br>    <span class=\"hljs-keyword\">int</span> i = <span class=\"hljs-number\">0</span>;<br>    <span class=\"hljs-keyword\">while</span> (*(*str) != <span class=\"hljs-string\">&#x27;,&#x27;</span>)<br>    &#123;<br>        ch[i++] = (*(*str));<br>        ++(*str);<br>    &#125;<br>    ++(*str);<br>    <br>    <span class=\"hljs-keyword\">int</span> value =strtol(ch,<span class=\"hljs-string\">&#x27;\\0&#x27;</span>,<span class=\"hljs-number\">10</span>);<br>    <br>    BinaryNode *root = (BinaryNode *)<span class=\"hljs-built_in\">malloc</span>(<span class=\"hljs-keyword\">sizeof</span>(BinaryNode));<br>    root-&gt;val = value;<br>    root-&gt;left = root-&gt;right = <span class=\"hljs-literal\">NULL</span>;<br>    root-&gt;left = DeserializeByPreOrder(str);<br>    root-&gt;right = DeserializeByPreOrder(str);<br><br>    <span class=\"hljs-keyword\">return</span> root;<br>&#125;<br><br><span class=\"hljs-comment\">//释放二叉树内存空间</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">FreeBinaryTree</span><span class=\"hljs-params\">(BinaryNode *root)</span></span><br><span class=\"hljs-function\"></span>&#123;<br>    <span class=\"hljs-keyword\">if</span> (root == <span class=\"hljs-literal\">NULL</span>)<br>    &#123;<br>        <span class=\"hljs-keyword\">return</span>;<br>    &#125;<br>    BinaryNode *left = root-&gt;left;<br>    BinaryNode *right = root-&gt;right;<br>    <span class=\"hljs-built_in\">free</span>(root);<br>    root = <span class=\"hljs-literal\">NULL</span>;<br>    FreeBinaryTree(left);<br>    FreeBinaryTree(right);<br>&#125;<br></code></pre></td></tr></table></figure>\n","next":{"title":"经典排序算法汇总","link":"2020/05/08/经典排序算法"},"plink":"https://TOPUBLICZX.GITHUB.IO/2020/08/08/二叉树序列化与反序列化/","toc":[{"id":"1、定义","title":"1、定义","index":"1"},{"id":"2、序列化","title":"2、序列化","index":"2"},{"id":"3、反序列化","title":"3、反序列化","index":"3"},{"id":"4、完整代码","title":"4、完整代码","index":"4"}],"reward":true,"copyright":{"author":"CLUB TSANG","link":"<a href=\"https://TOPUBLICZX.GITHUB.IO/2020/08/08/二叉树序列化与反序列化/\" title=\"二叉树（Binary tree）序列化与反序列化\">https://TOPUBLICZX.GITHUB.IO/2020/08/08/二叉树序列化与反序列化/</a>","license":"Attribution-NonCommercial-NoDerivatives 4.0 International (<a href=\"https://creativecommons.org/licenses/by-nc-sa/4.0/\" rel=\"external nofollow noopener\" target=\"_blank\">CC BY-NC-ND 4.0</a>)"}}