{"title":"绳子最多能覆盖其中的几个点","date":"2020-05-04T16:00:00.000Z","date_formatted":{"ll":"May 5, 2020","L":"05/05/2020","MM-DD":"05-05"},"updated":"2021-05-06T17:40:17.608Z","content":"<h2 id=\"1、问题描述\">1、问题描述<a title=\"#1、问题描述\" href=\"#1、问题描述\"></a></h2>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs plaintext\">给定一个有序数组arr,代表数轴上从左到右有n个点arr[0]、 arr[1]...arr[n－ 1],<br>给定一个正数L， 代表一根长度为L的绳子， 求绳子最多能覆盖其中的几个点。<br></code></pre></td></tr></table></figure>\n<h2 id=\"2、例子\">2、例子<a title=\"#2、例子\" href=\"#2、例子\"></a></h2>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs plaintext\">v=[1,3,7,9,13,14,16]<br>L=5<br>result=3<br></code></pre></td></tr></table></figure>\n<h2 id=\"3、暴力解法\">3、暴力解法<a title=\"#3、暴力解法\" href=\"#3、暴力解法\"></a></h2>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c++\"><span class=\"hljs-comment\">//暴力解法O(n*n)，空间复杂度O(1)</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">coverMaxPoint_1</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">const</span> vector&lt;<span class=\"hljs-keyword\">int</span>&gt; v, <span class=\"hljs-keyword\">double</span> L)</span></span><br><span class=\"hljs-function\"></span>&#123;<br>    <span class=\"hljs-keyword\">if</span> (v.<span class=\"hljs-built_in\">empty</span>() || L &lt;= <span class=\"hljs-number\">0</span>)<br>    &#123;<br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;<br>    &#125;<br>    <span class=\"hljs-keyword\">int</span> res = <span class=\"hljs-number\">1</span>, size = v.<span class=\"hljs-built_in\">size</span>();<br>    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">int</span> i = <span class=\"hljs-number\">1</span>; i &lt; size; ++i)<br>    &#123;<br>        <span class=\"hljs-keyword\">int</span> j = <span class=\"hljs-number\">0</span>;<br>        <span class=\"hljs-keyword\">while</span> (j &lt; i &amp;&amp; (<span class=\"hljs-keyword\">double</span>)v[j] &lt; (<span class=\"hljs-keyword\">double</span>)v[i] - L)<br>        &#123;<br>            ++j;<br>        &#125;<br>        res = <span class=\"hljs-built_in\">max</span>(res, i - j + <span class=\"hljs-number\">1</span>);<br>    &#125;<br>    <span class=\"hljs-keyword\">return</span> res;<br>&#125;<br></code></pre></td></tr></table></figure>\n<h2 id=\"4、二分查找思想解法\">4、二分查找思想解法<a title=\"#4、二分查找思想解法\" href=\"#4、二分查找思想解法\"></a></h2>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c++\"><span class=\"hljs-comment\">//在数组v中，从 0---&gt;n 找到值大于等于target的下标最小值</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">nearestIndex</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">const</span> vector&lt;<span class=\"hljs-keyword\">int</span>&gt; v, <span class=\"hljs-keyword\">int</span> n, <span class=\"hljs-keyword\">double</span> target)</span></span><br><span class=\"hljs-function\"></span>&#123;<br>    <span class=\"hljs-keyword\">int</span> begin = <span class=\"hljs-number\">0</span>, end = n;<br>    <span class=\"hljs-keyword\">int</span> index = <span class=\"hljs-number\">0</span>;<br>    <span class=\"hljs-keyword\">while</span> (begin &lt; end)<br>    &#123;<br>        <span class=\"hljs-keyword\">int</span> mid = begin + (end - begin) / <span class=\"hljs-number\">2</span>;<br>        <span class=\"hljs-keyword\">if</span> ((<span class=\"hljs-keyword\">double</span>)v[mid] &gt;= target)<br>        &#123;<br>            end = mid - <span class=\"hljs-number\">1</span>;<br>            index = mid;<br>        &#125;<br>        <span class=\"hljs-keyword\">else</span><br>        &#123;<br>            begin = mid + <span class=\"hljs-number\">1</span>;<br>        &#125;<br>    &#125;<br>    <span class=\"hljs-keyword\">return</span> index;<br>&#125;<br><br><span class=\"hljs-comment\">//通过二分查找优化,时间复杂度O(n*logn)，空间复杂度O(1)</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">coverMaxPoint_2</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">const</span> vector&lt;<span class=\"hljs-keyword\">int</span>&gt; v, <span class=\"hljs-keyword\">double</span> L)</span></span><br><span class=\"hljs-function\"></span>&#123;<br>    <span class=\"hljs-keyword\">if</span> (v.<span class=\"hljs-built_in\">empty</span>() || L &lt;= <span class=\"hljs-number\">0</span>)<br>    &#123;<br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;<br>    &#125;<br>    <span class=\"hljs-keyword\">int</span> res = <span class=\"hljs-number\">1</span>;<br>    <span class=\"hljs-keyword\">int</span> size = v.<span class=\"hljs-built_in\">size</span>();<br>    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">int</span> i = <span class=\"hljs-number\">1</span>; i &lt; size; ++i)<br>    &#123;<br>        res = <span class=\"hljs-built_in\">max</span>(res, i + <span class=\"hljs-number\">1</span> - <span class=\"hljs-built_in\">nearestIndex</span>(v, i, (<span class=\"hljs-keyword\">double</span>)v[i] - L));<br>    &#125;<br>    <span class=\"hljs-keyword\">return</span> res;<br>&#125;<br></code></pre></td></tr></table></figure>\n<h2 id=\"5、滑动窗口思想解法\">5、滑动窗口思想解法<a title=\"#5、滑动窗口思想解法\" href=\"#5、滑动窗口思想解法\"></a></h2>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c++\"><span class=\"hljs-comment\">//滑动窗口的思想，时间复杂度O(n),空间复杂度O(1)</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">coverMaxPoint_3</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">const</span> vector&lt;<span class=\"hljs-keyword\">int</span>&gt; v, <span class=\"hljs-keyword\">double</span> L)</span></span><br><span class=\"hljs-function\"></span>&#123;<br>    <span class=\"hljs-keyword\">if</span> (v.<span class=\"hljs-built_in\">empty</span>() || L &lt;= <span class=\"hljs-number\">0</span>)<br>    &#123;<br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;<br>    &#125;<br>    <span class=\"hljs-keyword\">int</span> res = <span class=\"hljs-number\">1</span>;<br>    <span class=\"hljs-keyword\">int</span> low = <span class=\"hljs-number\">0</span>, high = <span class=\"hljs-number\">1</span>, size = v.<span class=\"hljs-built_in\">size</span>();<br>    <span class=\"hljs-keyword\">while</span> (high &lt; size)<br>    &#123;<br>        <span class=\"hljs-keyword\">if</span> ((<span class=\"hljs-keyword\">double</span>)(v[high] - v[low]) &lt;= L)<br>        &#123;<br>            ++high;<br>        &#125;<br>        <span class=\"hljs-keyword\">else</span><br>        &#123;<br>            ++low;<br>        &#125;<br>        <span class=\"hljs-keyword\">if</span> (high &lt; size)<br>        &#123;<br>            res = <span class=\"hljs-built_in\">max</span>(res, high - low + <span class=\"hljs-number\">1</span>);<br>        &#125;<br>    &#125;<br>    <span class=\"hljs-keyword\">return</span> res;<br>&#125;<br></code></pre></td></tr></table></figure>\n","link":"notes/zuoshen/CoverMaxPoint","plink":"https://TOPUBLICZX.GITHUB.IO/notes/zuoshen/CoverMaxPoint/","toc":[{"id":"1、问题描述","title":"1、问题描述","index":"1"},{"id":"2、例子","title":"2、例子","index":"2"},{"id":"3、暴力解法","title":"3、暴力解法","index":"3"},{"id":"4、二分查找思想解法","title":"4、二分查找思想解法","index":"4"},{"id":"5、滑动窗口思想解法","title":"5、滑动窗口思想解法","index":"5"}],"reward":true,"copyright":{"author":"CLUB TSANG","link":"<a href=\"https://TOPUBLICZX.GITHUB.IO/notes/zuoshen/CoverMaxPoint/\" title=\"绳子最多能覆盖其中的几个点\">https://TOPUBLICZX.GITHUB.IO/notes/zuoshen/CoverMaxPoint/</a>","license":"Attribution-NonCommercial-NoDerivatives 4.0 International (<a href=\"https://creativecommons.org/licenses/by-nc-sa/4.0/\" rel=\"external nofollow noopener\" target=\"_blank\">CC BY-NC-ND 4.0</a>)"}}